#include <metal_stdlib>
using namespace metal;

struct VertexOut {
  float4 position [[position]];
  float2 uv;
};

vertex VertexOut vertex_pass(uint vid [[vertex_id]]) {
  float2 pos[4] = { {-1,-1},{1,-1},{-1,1},{1,1} };
  VertexOut o;
  o.position = float4(pos[vid], 0, 1);
  o.uv = pos[vid] * 0.5 + 0.5;
  return o;
}

// Inferno map





fragment float4 fragment_fits(VertexOut in [[stage_in]],
                              texture2d<float> fitsTex [[texture(0)]],
                              constant float &bscale          [[buffer(0)]],
                              constant float &bzero           [[buffer(1)]],
                              constant float &physMin         [[buffer(2)]],
                              constant float &physMax         [[buffer(3)]],
                              constant float2 &clipPct        [[buffer(4)]],
                              constant uint &scaleModeIndex   [[buffer(5)]],
                              constant uint &colorMapIndex    [[buffer(6)]]) {
  constexpr sampler s(
      coord::normalized,
      address::clamp_to_edge,
      filter::nearest,
      mip_filter::nearest // Use linear mipmap filtering
  );
    
  constexpr float3 inferno_lut[64] = {
        {0.0014619955811715800, 0.0004659913919114930, 0.013866005775115800},
        {0.0060856199973481300, 0.0047608150631290700, 0.038972577074010000},
        {0.0142390968227676000, 0.0114067145595503000, 0.072696769367604300},
        {0.0263597494732478000, 0.0196371511262628000, 0.107164834841860000},
        {0.0432298510294024000, 0.0285492233720053000, 0.142852712978962000},
        {0.0626105745259869000, 0.0370429203982083000, 0.179854442061250000},
        {0.0834913205879145000, 0.0437314554910583000, 0.218001796452774000},
        {0.1065364675949390000, 0.0471642273621484000, 0.256584286054193000},
        {0.1317566332836360000, 0.0471410188094710000, 0.294206729149934000},
        {0.1587805450536410000, 0.0441458847917683000, 0.328737055029881000},
        {0.1867333299296950000, 0.0398558637725947000, 0.358052359225789000},
        {0.2146868237774250000, 0.0368179170887193000, 0.381158987649421000},
        {0.2421013196325500000, 0.0368673283897538000, 0.398440459948391000},
        {0.2688602365643880000, 0.0404354530234317000, 0.410973503776611000},
        {0.2950437782162770000, 0.0468574875017374000, 0.419873183422571000},
        {0.3208052012922630000, 0.0550178442132596000, 0.426016855869708000},
        {0.3462810744562750000, 0.0640673811522315000, 0.430028703278885000},
        {0.3715823392590720000, 0.0734671115915782000, 0.432322959012017000},
        {0.3967865188355430000, 0.0829210340822726000, 0.433172687379822000},
        {0.4219578219516140000, 0.0922793843529119000, 0.432736050145098000},
        {0.4471325470884180000, 0.1014870738421850000, 0.431104636870458000},
        {0.4723285622202330000, 0.1105450925387760000, 0.428334014815688000},
        {0.4975539921914620000, 0.1194808690343090000, 0.424434391483190000},
        {0.5228010977172060000, 0.1283557695412520000, 0.419415328375083000},
        {0.5480493564095700000, 0.1372408767083720000, 0.413271108162237000},
        {0.5732686798991840000, 0.1462208097148080000, 0.405996456852091000},
        {0.5984177157456560000, 0.1553926028260410000, 0.397593944336347000},
        {0.6234475076301250000, 0.1648632855764610000, 0.388066346832288000},
        {0.6482987451769340000, 0.1747459084804770000, 0.377435816595761000},
        {0.6729014274517710000, 0.1851600720750580000, 0.365726457379990000},
        {0.6971788373905630000, 0.1962302024924620000, 0.352986326605839000},
        {0.7210463739072390000, 0.2080771780098540000, 0.339263527220120000},
        {0.7444129263427590000, 0.2208196725218750000, 0.324630288099720000},
        {0.7671808189355750000, 0.2345642638302260000, 0.309166113425662000},
        {0.7892514515236490000, 0.2494061896245400000, 0.292951056907997000},
        {0.8105211670285720000, 0.2654191841284350000, 0.276078592700971000},
        {0.8308925639196660000, 0.2826554859855090000, 0.258636436168730000},
        {0.8502719938581040000, 0.3011395006322690000, 0.240708260994334000},
        {0.8685706660862300000, 0.3208719604870560000, 0.222360279627972000},
        {0.8857147593370380000, 0.3418275922845660000, 0.203640498111205000},
        {0.9016405502610750000, 0.3639590959798890000, 0.184573491479980000},
        {0.9162961627501870000, 0.3872013751366050000, 0.165157315890811000},
        {0.9296439014941760000, 0.4114761277881530000, 0.145367501589709000},
        {0.9416529124736980000, 0.4367063713407390000, 0.125173915945657000},
        {0.9523071953201080000, 0.4628025580582440000, 0.104552195353787000},
        {0.9615932007416390000, 0.4896799300459280000, 0.083564484007113900},
        {0.9694985762658730000, 0.5172613183348200000, 0.062543001348174800},
        {0.9760154385945030000, 0.5454771936452000000, 0.042566775071953400},
        {0.9811320847298080000, 0.5742621211195130000, 0.027866493814821600},
        {0.9848348768589090000, 0.6035555219679200000, 0.023801331414310100},
        {0.9871093158707370000, 0.6333067193936460000, 0.032420718659929600},
        {0.9879380550309670000, 0.6634638741508510000, 0.054613310502615800},
        {0.9873067536396490000, 0.6939753423547640000, 0.083722994484984100},
        {0.9852043064855130000, 0.7247866252227410000, 0.116752338558081000},
        {0.9816315597243280000, 0.7558372599499630000, 0.152913003311621000},
        {0.9766443327352870000, 0.7870339515557670000, 0.192201991207091000},
        {0.9703526784714700000, 0.8182561240082540000, 0.235034475886167000},
        {0.9630617662254480000, 0.8492954597160740000, 0.282094171894424000},
        {0.9554432815704080000, 0.8797950443722190000, 0.334276019263328000},
        {0.9489455038015060000, 0.9091249262127280000, 0.392440927815436000},
        {0.9464077961425020000, 0.9362423285007730000, 0.456282735132080000},
        {0.9515347738010580000, 0.9600587173648700000, 0.522652097343438000},
        {0.9660387405107200000, 0.9804488279560630000, 0.586478502427134000},
        {0.9883620799212210000, 0.9983616470620550000, 0.644924098280386000},
    };
    

  // Sample raw FITS data and apply BSCALE/BZERO
  float raw = fitsTex.sample(s, in.uv).r;
  float phys = bzero + raw * bscale;
  // Apply scale mode: 0=linear, 1=square, 2=log
  switch (scaleModeIndex) {
    case 1: phys = phys * phys; break;
    case 2: {
      float shift = min(0.0, phys) * -1.0;
      phys = log10(phys + shift + 1.0);
    } break;
    default: break;
  }
  // Compute clipping thresholds
  float lowPhys = physMin + clipPct.x * (physMax - physMin);
  float highPhys = physMin + clipPct.y * (physMax - physMin);
  float t = clamp((phys - lowPhys) / (highPhys - lowPhys), 0.0, 1.0);
  // Map to RGB based on selected colormap: 0=gray, 1=hot, 2=jet
  float3 rgb;
  switch (colorMapIndex) {
    case 0: // Gray
      rgb = float3(t, t, t);
      break;
    case 1: // Hot
      if (t < 0.33) rgb = float3(t*3, 0.0, 0.0);
      else if (t < 0.66) rgb = float3(1.0, (t-0.33)*3.0, 0.0);
      else rgb = float3(1.0, 1.0, (t-0.66)*3.0);
      break;
    case 2: // Jet
    default: {
      auto jetf = [&](float x) {
        return min(max(1.5 - fabs(4.0*t - x), 0.0), 1.0);
      };
      rgb = float3(jetf(3.0), jetf(2.0), jetf(1.0));
    } break;
    case 3: // Inferno
      {
          // linear interpolation
          constexpr float lutSize = 64.0;
          float idx = t * (lutSize - 1);
          uint i0 = uint(floor(idx));
          uint i1 = min(i0 + 1, uint(lutSize));
          float f = idx - float(i0);
          
          float3 c0 = inferno_lut[i0];
          float3 c1 = inferno_lut[i1];
          rgb = mix(c0, c1, f);
      } break;
          
  }
  return float4(rgb, 1.0);
}
